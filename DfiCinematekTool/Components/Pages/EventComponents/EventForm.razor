@inject IEventService EventService
@inject IUserService UserService
@inject IFilmService FilmService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (Event is not null)
{
	<EditForm method="post" FormName="CreateOrEditEventForm" OnValidSubmit="CreateOrEditEvent" Model="@Event" autocomplete="off">
		<RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Style="width:100%;">
			<RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Gap="1rem" class="rz-p-sm-11" Style="width:100%; max-width: 500px;">

				<RadzenText class="rz-mb-2" TextStyle="TextStyle.DisplayH6">@Title</RadzenText>

				<RadzenFormField Text="Title" Variant="Variant.Outlined" Style="width: 100%;">
					<RadzenTextBox @bind-Value="Event.Title" />
				</RadzenFormField>

				<RadzenFormField Text="Forkortelse" Variant="Variant.Outlined" Style="width: 100%;">
					<RadzenTextBox @bind-Value="Event.Abbriviation" />
				</RadzenFormField>

				<RadzenFormField Text="Ejer" Variant="Variant.Outlined" Style="width: 100%;">
					<RadzenTextBox @bind-Value="Event.Owner" Disabled />
				</RadzenFormField>

				<RadzenFormField Text="Ejers email" Variant="Variant.Outlined" Style="width: 100%;">
					<RadzenTextBox @bind-Value="Event.OwnerEmail" />
				</RadzenFormField>

				<RadzenFormField Text="Dato & Tid" Variant="Variant.Outlined" Style="width: 100%;">
					<RadzenDatePicker @bind-Value="Event.Date" Name="EventDate" ShowCalendarWeek="true" />
				</RadzenFormField>

				<RadzenDropDown class="rz-mt-2"
				@bind-Value="Event.EventType"
				Data="@EventTypeEnums"
				TextProperty="@nameof(EventType.Event)"
				ValueProperty="@nameof(EventType.Value)"
				Multiple="false"
				AllowClear="true"
				Chips="true"
				Placeholder="Angiv event"
				Style="width: 100%;" />

				<RadzenDropDown class="rz-mt-2"
				@bind-Value="Event.Screen"
				Data="@ScreenOptions"
				TextProperty="@nameof(Screen.ScreenType)"
				ValueProperty="@nameof(Screen.Value)"
				Multiple="false"
				AllowClear="true"
				Chips="true"
				Placeholder="Angiv skærm"
				Style="width: 100%;" />

				<RadzenStack Style="width: 100%">
					<RadzenDropDownDataGrid @ref="grid" Chips="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowClear="true" @bind-Value=@filmIds
					Multiple="true" Placeholder="Vælgfilm" Data=@FilmList TextProperty="@nameof(Film.Title)" ValueProperty="@nameof(Film.Id)" Name="DropDownDataGridMultiple">
						<Columns>
							<RadzenDropDownDataGridColumn Width="60px" Sortable="false">
								<HeaderTemplate>
									<RadzenCheckBox InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "select all" }})" Disabled="true" TriState="false" TValue="bool"
									Value="@(FilmList.Any(f => filmIds != null && filmIds.Contains(f.Id)))"
									Change="@(args => filmIds = args ? grid!.View.Cast<Film>().Select(f => f.Id) : filmIds = Enumerable.Empty<int>())" />
								</HeaderTemplate>
								<Template Context="data">
									<RadzenCheckBox InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "select item" }})" TriState="false"
									Value="@(filmIds != null && filmIds.Contains(((Film) data).Id))"
									TValue="bool" Change=@(args => grid!.SelectItem(data)) @onclick:stopPropagation />
								</Template>
							</RadzenDropDownDataGridColumn>
							<RadzenDropDownDataGridColumn Property="@nameof(Film.Title)" Title="FilmTitle" Width="100px" />
							<RadzenDropDownDataGridColumn Property="@nameof(Film.DurationInMinutes)" Title="FilmDuration" Width="100px" />
						</Columns>
					</RadzenDropDownDataGrid>
				</RadzenStack>

				<RadzenRow Style="width: 100%" JustifyContent="JustifyContent.SpaceAround" AlignItems="AlignItems.Center">

					<RadzenStack>
						<RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Event</RadzenText>
						<RadzenCheckBox TValue="bool" @bind-Value=Event.IsEvent Change=@(args => Event.IsEvent = args) Name="IsEventCheck" Style="width: 25px; height: 25px;" />
					</RadzenStack>

					<RadzenStack>
						<RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Tagbio</RadzenText>
						<RadzenCheckBox TValue="bool" @bind-Value=Event.IsRooftop Change=@(args => Event.IsRooftop = args) Name="IsRooftopCheck" Style="width: 25px; height: 25px;"  />
					</RadzenStack>
				</RadzenRow>

				<div class="rz-mb-8" style="display: flex; justify-content: space-between; align-items: center; width: 100%; max-width: 500px; gap: 1.5rem;">
					<RadzenButton ButtonType="ButtonType.Submit" Shade="Shade.Light" Text="Ok" ButtonStyle="ButtonStyle.Success" class="rz-mt-4" Style="width: 100%;" />
					<RadzenButton Click="@(() => Navigation.NavigateTo("/EventOverview"))" ButtonType="ButtonType.Reset" Shade="Shade.Light" Text="Tilbage" ButtonStyle="ButtonStyle.Base" class="rz-mt-4" Style="width: 100%;" />
				</div>
			</RadzenStack>
		</RadzenStack>

		<DataAnnotationsValidator />
		<ValidationSummary />
	</EditForm>
}

@code {
	[SupplyParameterFromForm]
	public Event Event { get; set; } = new Event();

	[Parameter]
	public bool IsEditMode { get; set; } = false;

	[Parameter]
	public int EventId { get; set; }

	[Parameter]
	public EventCallback<Event> OnValidEventSubmit { get; set; }

	[Parameter]
	public ICollection<Film> FilmList { get; set; } = new List<Film>();

	private string Title => IsEditMode ? $"Opdater event" : "Opret nyt event";

	private List<Screen> ScreenOptions = Enum.GetValues(typeof(ScreenEnum)).Cast<ScreenEnum>().Select(screen => screen.ConvertScreenEnumToScreen()).ToList();

	private List<EventType> EventTypeEnums = Enum.GetValues(typeof(EventTypeEnum)).Cast<EventTypeEnum>().Select(eventType => eventType.ConvertEventTypeEnumToEventType()).ToList();

	private RadzenDropDownDataGrid<IEnumerable<int>>? grid;

	private IEnumerable<int> filmIds { get; set; } = new List<int>();

	
	public void AddFilmsToEvent()
	{
		Event.Films?.Clear();

		if (filmIds != null)
		{
			foreach (var filmId in filmIds)
			{
				var film = FilmList.FirstOrDefault(f => f.Id == filmId);
				if (film != null)
				{
					Event.Films?.Add(film);
				}
			}
		}
	}

	protected override async Task OnInitializedAsync()
	{
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		Event.Owner = authState.User.Identity?.Name!;

		FilmList = await FilmService.GetAllFilmsAsync() ?? [];

		if (IsEditMode)
		{
			Event.Owner = "";
			var existingEvent = await EventService.GetEventById(EventId);
			if (existingEvent != null)
			{
				Event = existingEvent;

				if (Event.Films != null) 
				{ 
						filmIds = Event.Films.Select(film => film.Id).ToList();
				}
			}
		}
	}

	private async Task CreateOrEditEvent()
	{
		AddFilmsToEvent();
		await OnValidEventSubmit.InvokeAsync(Event);
	}
}
