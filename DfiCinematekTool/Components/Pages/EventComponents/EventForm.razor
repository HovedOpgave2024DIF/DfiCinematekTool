@inject IEventService EventService
@inject IUserService UserService
@inject IFilmService FilmService
@inject IHttpContextAccessor HttpContextAccessor

@if (Event is not null)
{
	<EditForm method="post" FormName="CreateOrEditEventForm" OnValidSubmit="CreateOrEditEvent" Model="@Event" autocomplete="off">
		<h3>
			@Title
		</h3>
		@if (IsEditMode)
		{
			<input type="hidden" name="Book.Id" value="@Event.Id" />
		}


		<div class="mb-3">
			<RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Event title</RadzenText>
			<RadzenTextBox @bind-Value=@Event.Title Style="width: 100%" aria-label="Default TextBox" />
		</div>

		<div class="mb-3">
			<RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Event abbriviation</RadzenText>
			<RadzenTextBox @bind-Value=@Event.Abbriviation Style="width: 100%" aria-label="Default TextBox" />

		</div>

		<div class="mb-3">
			<RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Event owner</RadzenText>
			<!--<AuthorizeView Roles="Admin, User" Context="userContext1">
			<Authorized Context="userAuthorizedContext1">-->
			<RadzenTextBox Disabled="true" Value="admin@dfi.dk" Style="width: 100%; max-width: 400px;" Name="UserName" />
			<!--</Authorized>
			</AuthorizeView>-->
		</div>

		<div class="mb-3">
			<RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Owner Email</RadzenText>
			<RadzenTextBox Disabled="true" Value="admin@dfi.dk" Style="width: 100%; max-width: 400px;" Name="UserEmail" />
		</div>

		<div class="mb-3">
			<RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Date (DDMMYY)</RadzenText>
			<RadzenDatePicker @bind-Value=@Event.Date Name="EventDate" ShowCalendarWeek />
		</div>

		<div class="mb-3">
			<RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Event type</RadzenText>
			<RadzenDropDown @bind-Value=@Event.EventType Data=@EventTypeEnums Style="width: 100%; max-width: 400px;" Name="EventTypeDropdown" />
		</div>

		<div class="mb-3">
			<RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Screen</RadzenText>
			<RadzenDropDown @bind-Value=@Event.Screen Data=@ScreenEnums Style="width: 100%; max-width: 400px;" Name="ScreenDropdown" />
		</div>

		<div class="mb-3">
			<RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Is Event?</RadzenText>
			<RadzenCheckBox TValue="bool" @bind-Value=Event.IsEvent Change=@(args => Event.IsEvent = args) Name="IsEventCheck"></RadzenCheckBox>
		</div>

		<div class="mb-3">
			<RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Is Rooftop?</RadzenText>
			<RadzenCheckBox TValue="bool" @bind-Value=Event.IsRooftop Change=@(args => Event.IsRooftop = args) Name="IsRooftopCheck"></RadzenCheckBox>
		</div>


		<div class="mb-3">
			<RadzenLabel Text="Select Films" Component="DropDownDataGridMultiple" />
			<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Gap="0.5rem" class="rz-p-12">
				<RadzenLabel Text="Select Values" Component="DropDownDataGridMultiple" />
				<RadzenDropDownDataGrid @ref="grid" Chips="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowClear="true" @bind-Value=@filmIds
				Multiple="true" Placeholder="Select..." Data=@FilmList TextProperty="@nameof(Film.Title)" ValueProperty="@nameof(Film.Id)" Name="DropDownDataGridMultiple">
					<Columns>
						<RadzenDropDownDataGridColumn Width="60px" Sortable="false">
							<HeaderTemplate>
								<RadzenCheckBox InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "select all" }})" Disabled="@(!grid.AllowSelectAll)" TriState="false" TValue="bool"
								Value="@(FilmList.Any(f => filmIds != null && filmIds.Contains(f.Id)))"
								Change="@(args => filmIds = args ? grid.View.Cast<Film>().Select(f => f.Id) : filmIds = Enumerable.Empty<int>())" />
							</HeaderTemplate>
							<Template Context="data">
								<RadzenCheckBox InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "select item" }})" TriState="false"
								Value="@(filmIds != null && filmIds.Contains(((Film) data).Id))"
								TValue="bool" Change=@(args => grid.SelectItem(data)) @onclick:stopPropagation />
							</Template>
						</RadzenDropDownDataGridColumn>
						<RadzenDropDownDataGridColumn Property="@nameof(Film.Title)" Title="FilmTitle" Width="100px" />
						<RadzenDropDownDataGridColumn Property="@nameof(Film.DurationInMinutes)" Title="FilmDuration" Width="100px" />
					</Columns>
				</RadzenDropDownDataGrid>
			</RadzenStack>
		</div>

		<div class=" mb-3">
			<button class="btn-primary shadow-none">
				Submit
			</button>
			<a href="/" class="btn btn-secondary shadow-none ms-3">
				Back to list
			</a>
		</div>
		<DataAnnotationsValidator />
		<ValidationSummary />
	</EditForm>
}

@code {
	[SupplyParameterFromForm]
	public Event Event { get; set; } = new();

	[Parameter]
	public bool IsEditMode { get; set; } = false;

	[Parameter]
	public int EventId { get; set; }

	private string Title => IsEditMode ? $"Edit Event {EventId}" : "Create New Event";

	[Parameter]
	public EventCallback<Event> OnValidEventSubmit { get; set; }

	//Enums for dropdown menus
	public List<string> ScreenEnums = Enum.GetValues(typeof(Screen)).Cast<Screen>().Select(s => s.ToString()).ToList();

	public List<string> EventTypeEnums = Enum.GetValues(typeof(EventType)).Cast<EventType>().Select(e => e.ToString()).ToList();

	//For adding film data
	RadzenDropDownDataGrid<IEnumerable<int>>? grid;

	[Parameter]
	public ICollection<Film> FilmList { get; set; } = new List<Film>();

	public IEnumerable<int> filmIds { get; set; } = new List<int>();

	public void AddFilmsToEvent()
	{
		foreach (int filmId in filmIds)
		{
			Event.Films?.Add(new Film { Id = filmId });
		}
	}

	protected override async Task OnInitializedAsync()
	{
		FilmList = await FilmService.GetAllFilmsAsync() ?? [];

		if (IsEditMode)
		{
			var existingEvent = await EventService.GetEventById(EventId);
			if (existingEvent != null)
			{
				Event = existingEvent;

				if (Event.Films.Any()) 
				{ 
						filmIds = Event.Films.Select(film => film.Id).ToList();
				}
			}
		}
	}

	private async Task CreateOrEditEvent()
	{
		AddFilmsToEvent();
		await OnValidEventSubmit.InvokeAsync(Event);
	}
}
