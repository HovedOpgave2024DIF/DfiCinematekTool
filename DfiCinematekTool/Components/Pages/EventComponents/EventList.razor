<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.End" Gap="0.5rem" class="rz-p-2 rz-mb-2">
    <RadzenStack Gap="1rem" Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.End">
        <RadzenStack Gap="0.5rem">
            <RadzenLabel Text="Vælg måned/år" Component="DatePickerYearMonth" />
            <RadzenDatePicker @bind-Value=@selectedYearMonth ShowDays=false DateFormat="MM/yyyy" CurrentDateChanged=@OnCurrentDateChanged Name="DatePickerYearMonth" Style="width: 120px; height: 40px;" />
        </RadzenStack>

        <RadzenStack Gap="0.5rem" Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.End" class="rz-mb-1">
            <RadzenButton Click=@ResetCurrentDate Text="" Icon="calendar_month" Shade="Shade.Light" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" />
        </RadzenStack>
    </RadzenStack>

    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.End" Gap="1rem">
        <RadzenStack Gap="0.5rem">
            <RadzenLabel Text="Til dato" Component="DatePickerDateOnlyType" />
            <RadzenDatePicker @bind-Value="@fromDate" DateFormat="dd/MM/yyyy" Name="DatePickerDateOnlyType" Style="width: 120px; height: 40px;" />
        </RadzenStack>

        <RadzenStack Gap="0.5rem">
            <RadzenLabel Text="Fra dato" Component="DatePickerDateOnlyType" />
            <RadzenDatePicker @bind-Value="@toDate" DateFormat="dd/MM/yyyy" Name="DatePickerDateOnlyType" Style="width: 120px; height: 40px;" />
        </RadzenStack>

        <RadzenStack Gap="0.5rem" Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.End" class="rz-mb-1">
            <RadzenButton Click=@(() => FilterByDate(true)) Text="" Icon="calendar_add_on" Shade="Shade.Light" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" />
            <RadzenButton Click=@(() => FilterByDate(false)) Text="" Icon="history" Shade="Shade.Light" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small" />
        </RadzenStack>
    </RadzenStack>

    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.End" Gap="0.5rem" class="rz-mb-1">
        <RadzenCheckBox @bind-Value="@allowVirtualization" Name="allowVirtualization" />
        <RadzenLabel Text="Virtualisering" Component="allowVirtualization" />
    </RadzenStack>
</RadzenStack>

@if (FilteredEventList.Count <= 0)
{
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" Style="height: 80%;">
        <RadzenText class="rz-color-warning" Text="Ingen events oprettet for denne måned.." TextStyle="TextStyle.DisplayH6" />
    </RadzenStack>
    return;
}

<RadzenDataList AllowVirtualization=@allowVirtualization Style="@(allowVirtualization ? "height:600px;overflow:auto;" : "")"
WrapItems="@(!allowVirtualization)" AllowPaging="@(!allowVirtualization)"
Data="@FilteredEventList" TItem="Event" PageSize="5" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true">
    <Template Context="ev">

        <RadzenCard Variant="Variant.Outlined" class="rz-p-0" Style="width: 100%; overflow: hidden;">
            <RadzenRow Gap="0">
                <RadzenColumn Size="12" SizeLG="2" class="rz-p-4" Style="min-height: 72px; background-color: var(--rz-secondary-lighter);">
                    <RadzenStack Gap="1rem" Orientation="Orientation.Vertical" AlignItems="AlignItems.Start">
                        <a href=@($"/EventOverview/editevent/{ev.Id}") style="text-decoration: none; text-decoration-line: none;">
                            <RadzenText class="rz-color-warning rz-mb-2" Style="font-size: 1rem; border-bottom: 1px solid lightgrey; padding-bottom: 11px">
                                @($"{ev.Date:dddd dd/MM/yyyy}")
                            </RadzenText>
                        </a>

                        <RadzenText TextStyle="TextStyle.Body2" class="rz-color-grey">
                            <strong style="display: block;">Title:</strong>
                            @($"{ev.Title}")
                        </RadzenText>

                        <RadzenText TextStyle="TextStyle.Body2" class="rz-color-grey">
                            <strong style="display: block;">Tidspunkt:</strong>
                            @($"{ev.Date:HH:mm}")
                        </RadzenText>

                        <RadzenText TextStyle="TextStyle.Body2" class="rz-color-grey">
                            <strong style="display: block;">Lærred:</strong>
                            @($"{ev.Screen}")
                        </RadzenText>

                        <RadzenText TextStyle="TextStyle.Body2" class="rz-color-grey">
                            <strong style="display: block;">Varighed:</strong>
                            @($"{ev.DurationInMinutes} minuter")
                        </RadzenText>

                        <RadzenText TextStyle="TextStyle.Body2" class="rz-color-grey">
                            <strong style="display: block;">Ejer:</strong>
                            @($"{ev.Owner}")
                        </RadzenText>

                        <RadzenText TextStyle="TextStyle.Body2" class="rz-color-grey">
                            <strong style="display: block;">Eventtype:</strong>
                            @($"{ev.EventType}")
                        </RadzenText>

                        <RadzenText TextStyle="TextStyle.Body2" class="rz-color-grey">
                            <strong style="display: block;">Tagbio:</strong>
                            @($"{(ev.IsRooftop == false ? "Nej" : "Ja")}")
                        </RadzenText>

                        <DeleteEventDialog EventId="ev.Id" DialogConformation="HandleDeleteConfirmamtion" />

                    </RadzenStack>
                </RadzenColumn>

                <RadzenColumn Size="12" SizeLG="3" class="rz-p-4">
                    <RadzenRow>
                        <RadzenStack Gap="1rem" Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" Style="width: 100%;">

                            <RadzenText class="rz-color-grey rz-mb-2 " Style="font-size: 1rem; border-bottom: 1px solid lightgrey; padding-bottom: 11px;">
                                Filmvisninger
                            </RadzenText>

                            @if (ev.Films?.Count > 0)
                            {
                                @foreach (var film in ev.Films ?? [])
                                {
                                    <RadzenText TextStyle="TextStyle.Body2" class="rz-color-grey">
                                        <strong style="display: block;">@($"{film.Title}")</strong>
                                        <p>
                                            @($"{film.DurationInMinutes} minutter")
                                            <span style="padding-left: 10px;">@($"{film.Format}")</span>
                                        </p>
                                    </RadzenText>
                                }
                            }
                            else
                            {
                                <RadzenText class="rz-color-warning" Style="font-size: 1rem;">
                                    Tilføj film...
                                </RadzenText>
                            }
                        </RadzenStack>
                    </RadzenRow>
                </RadzenColumn>

                <RadzenColumn Size="12" SizeLG="7" class="rz-p-4">
                    <RadzenRow class="scrollable" Style="overflow-x: auto; overflow-y: hidden; white-space:nowrap; max-height: 100%; padding-bottom: 20px">
                        <RadzenStack Gap="1.02rem" Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" Style="width: 100%; height: 100%;">
                            <RadzenRow Gap="1.7rem" Style="display: flex; flex-wrap: nowrap;">

                                <div style="width: 40px;">
                                    <RadzenText class="rz-color-grey rz-mb-2 " Style="font-size: 1rem; border-bottom: 1px solid lightgrey; padding-bottom: 11px;">
                                        Nøgle
                                    </RadzenText>
                                </div>

                                <div style="width: 110px;">
                                    <RadzenText class="rz-color-grey rz-mb-2 " Style="font-size: 1rem; border-bottom: 1px solid lightgrey; padding-bottom: 11px;">
                                        Bestilt
                                    </RadzenText>
                                </div>

                                <div style="width: 110px; margin-left: 5px;">
                                    <RadzenText class="rz-color-grey rz-mb-2 " Style="font-size: 1rem; border-bottom: 1px solid lightgrey; padding-bottom: 11px;">
                                        Modtaget
                                    </RadzenText>
                                </div>

                                <div style="width: 110px; margin-left: 5px;">
                                    <RadzenText class="rz-color-grey rz-mb-2 " Style="font-size: 1rem; border-bottom: 1px solid lightgrey; padding-bottom: 11px;">
                                        Klargjort
                                    </RadzenText>
                                </div>

                                <div style="width: 110px; margin-left: 5px;">
                                    <RadzenText class="rz-color-grey rz-mb-2 " Style="font-size: 1rem; border-bottom: 1px solid lightgrey; padding-bottom: 11px;">
                                        Film Ok
                                    </RadzenText>
                                </div>

                                <div style="width: 150px; margin-left: 5px;">
                                    <RadzenText class="rz-color-grey rz-mb-2 " Style="font-size: 1rem; border-bottom: 1px solid lightgrey; padding-bottom: 11px;">
                                        Kommentar
                                    </RadzenText>
                                </div>

                            </RadzenRow>

                            @foreach (var eventFilmStatus in ev.FilmStatuses ?? [])
                            {
                                <UpdateFilmStatusForm FilmStatus="@eventFilmStatus" OnValidFilmStatusSumbit="HandleFilmStatusUpdate" />
                            }
                        </RadzenStack>
                    </RadzenRow>
                </RadzenColumn>
            </RadzenRow>
        </RadzenCard>
    </Template>
</RadzenDataList>

<style>
    .event-info {
    min-height: 72px;
    background-color: var(--rz-secondary-lighter);
    }
</style>

@code {
    [Parameter]
    public List<Event> Events { get; set; } = new();

    [Parameter]
    public EventCallback<FilmStatus> OnUpdateFilmStatus { get; set; }

    [Parameter]
    public EventCallback<(bool confirmation, int eventId)> DeleteConfirmation { get; set; }

    public List<Event> FilteredEventList = new();

    private DateOnly? fromDate = null;

    private DateOnly? toDate = null;

    private DateTime? selectedYearMonth = DateTime.Now;

    private bool allowVirtualization;


    protected override void OnInitialized()
    {
        FilteredEventList = Events;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Events.Any())
        {
            OnCurrentDateChanged(DateTime.Now);
        }
        await Task.CompletedTask;
    }

    private async Task HandleFilmStatusUpdate(FilmStatus filmStatus)
    {
        await OnUpdateFilmStatus.InvokeAsync(filmStatus);
    }

    private async Task HandleDeleteConfirmamtion((bool confirmation, int eventId) result)
    {
        await DeleteConfirmation.InvokeAsync((confirmation: result.confirmation, eventId: result.eventId));
    }

    private void FilterByDate(bool filter)
    {
        if (fromDate is not null && toDate is not null)
        {
            var dateOnlyFromDate = fromDate?.ToDateTime(TimeOnly.MinValue);
            var dateOnlyToDate = toDate?.ToDateTime(TimeOnly.MaxValue);

            if (filter)
            {
                FilteredEventList = Events.Where(ev => ev.Date >= dateOnlyFromDate && ev.Date <= dateOnlyToDate).ToList();
            }
            else
            {
                FilteredEventList = Events;
                fromDate = null;
                toDate = null;
            }
            StateHasChanged();
        }
    }

    private void OnCurrentDateChanged(DateTime date)
    {
        selectedYearMonth = new DateTime(date.Year, date.Month, 1);
        FilteredEventList = Events.Where(ev => ev.Date.Year == selectedYearMonth.Value.Year && ev.Date.Month == selectedYearMonth.Value.Month).ToList();
        StateHasChanged();
    }

    private void ResetCurrentDate()
    {
        selectedYearMonth = null;
        FilteredEventList = Events;
        StateHasChanged();
    }
}
