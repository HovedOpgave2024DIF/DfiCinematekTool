@page "/UserOverview"
@inject IUserService UserService
@inject ToasterService Toaster
@inject NavigationManager Navigation
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<PageTitle>Brugeroversigt</PageTitle>

<RadzenRow class="rz-mb-2 rz-ml-2">
	<RadzenButton Click=@(() => { Navigation.NavigateTo("/UserOverview/AddUser", true);}) Text="Tilføj bruger" Icon="add" Shade="Shade.Light" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.Small" />
</RadzenRow>

<UserList Users="@UserList" UserToDelete="DeleteUser" OnLockout="LockoutUser" />

@code {
	public List<User> UserList { get; set; } = new();

	protected override async Task OnInitializedAsync() {

		UserList = await UserService.GetAllUsersAsync();
	}

	private async Task DeleteUser((bool confirmation, string username) result) 
	{
		if (result.confirmation) {

			var isDeleted = await UserService.DeleteUserByUserNameAsync(result.username);

			if (isDeleted)
			{
				UserList = UserList.Where(user => user.UserName != result.username).ToList();

				StateHasChanged();

				Toaster.OnSuccess(
					"Bruger fjernet!",
					$"Bruger {result.username} er fjernet fra databasen.",
					6000
				);
			}
			else
			{
				Toaster.OnError(
					"Fejl. Bruger ikke fjernet!",
					$"Bruger {result.username} kunne ikke fjernes.",
					6000
				);
			}
		}
	}

	private async Task LockoutUser((bool isLocked, string username) result)
	{
		var userIsLocked = await UserService.HandleUserLockoutAsync(result.username, result.isLocked);

		if(userIsLocked) 
		{
			UserList = await UserService.GetAllUsersAsync(); ;

			StateHasChanged();

			if (result.isLocked)
			{
				Toaster.OnWarning(
				"Bruger adgang låst",
				$"Bruger {result.username} låst for aktivitet.",
				6000
				);
			}
			else
			{
				Toaster.OnSuccess(
				"Bruger adgang åbnet",
				$"Bruger {result.username} låst op for aktivitet.",
				6000
				);
			}
		}
	}
}
