@inject IEventRepository Repository
@inject IUserRepository RepositoryUser
@inject IFilmRepository RepositoryFilm

@if(Event is not null)
{
	<EditForm Enhance="true" method="post" FormName="CreateOrEditEventForm" OnValidSubmit="CreateOrEditEvent" Model="Event" autocomplete="off">
		<h3>
			@Title
		</h3>
		@if (IsEditMode)
		{
			<input type="hidden" name="Book.Id" value="@Event.Id" />
		}


		<div class="mb-3">
			<label for="title" class="form_label">
				Title
			</label>
			<InputText id="title" @bind-Value="Event.Title" class="form-control shadow-none">

			</InputText>
		</div>

		<div class="mb-3">
			<label for="abbriviation" class="form_label">
				Abbriviation
			</label>
			<InputText id="abbriviation" @bind-Value="Event.Abbriviation" class="form-control shadow-none">

			</InputText>
		</div>

		<div class="mb-3">
			<label for="owner" class="form_label">
				Owner
			</label>
			<InputSelect id="Owner" @bind-Value="Event.Owner" class="form-control shadow-none">
				<option value="0">
					Select Owner
				</option>
				@foreach (var userName in UserNames)
				{
					<option value="@userName">
						userName
					</option>
				}
			</InputSelect>
		</div>

		<div class="mb-3">
			<label for="ownerMail" class="form_label">
				Owner mail
			</label>
			<InputSelect id="ownerMail" @bind-Value="Event.OwnerEmail" class="form-control shadow-none">
				<option value="0">
					Select Owners email
				</option>
				@foreach (var userEmail in UserEmail)
				{
					<option value="@userEmail">
						userEmail
					</option>
				}
			</InputSelect>
		</div>

		<div class="mb-3">
			<label for="duration" class="form_label">
				Duration
			</label>
			<InputNumber id="duration" @bind-Value="Event.DurationInMinutes" class="form-control shadow-none">

			</InputNumber>
		</div>


		<div class="mb-3">
			<label for="date" class="form_label">
				Date
			</label>
			<InputNumber id="date" @bind-Value="Event.DateId" class="form-control shadow-none">

			</InputNumber>
		</div>


		<div class="mb-3">
			<label for="EventType" class="form_label">
				Category
			</label>
			<InputSelect id="eventType" @bind-Value="Event.EventType" class="form-control shadow-none">
				<option value="0">
					Select Category
				</option>
				@foreach (var eventType in Enum.GetValues(typeof(EventType)))
				{
					<option value="@eventType">
						@eventType.ToString()
					</option>
				}
			</InputSelect>
		</div>

		<div class="mb-3">
			<label for="Screen" class="form_label">
				Screen
			</label>
			<InputSelect id="screen" @bind-Value="Event.Screen" class="form-control shadow-none">
				<option value="0">
					Select Screen
				</option>
				@foreach (var screen in Enum.GetValues(typeof(Screen)))
				{
					<option value="@screen">
						@screen.ToString()
					</option>
				}
			</InputSelect>
		</div>

		<div class="mb-3">
			<label for="isEvent" class="form_label">
				Is event
			</label>
			<input type="checkbox" id="isEvent" @bind="Event.IsEvent" class="form-control shadow-none" />
		</div>

		<div class="mb-3">
			<label for="isRooftop" class="form_label">
				Is Rooftop
			</label>
			<input type="checkbox" id="isRooftop" @bind="Event.IsRooftop" class="form-control shadow-none" />
		</div>

		<!-- TODO double check if this saves the list correctly.-->
		<div class="mb-3">
			<label for="films" class="form_label">
				Films
			</label>

			@foreach (var film in Films) {
				<input type="checkbox" id="film - @film.Id" bind="Event.Films" class="form-control shadow-none" @onchange="(e) => OnFilmSelectionChanged(e, film)" />
				<label for="Film - @film.Id" class="form_label">@film.Title</label>			
			}


		</div>





		<div class=" mb-3">
			<button class="btn-primary shadow-none">
				Submit
			</button>
			<a href="/" class="btn btn-secondary shadow-none ms-3">
				Back to list
			</a>
		</div>
		<DataAnnotationsValidator />
		<ValidationSummary />
	</EditForm>
}

@code {
	[Parameter]
	public bool IsEditMode { get; set; } = false;

	[Parameter]
	public int EventId { get; set; }


	[Parameter]
	public EventCallback<Event> OnValidEventSubmit { get; set; }

	[Parameter]
	public List<String> UserNames { get; set; }

	[Parameter]
	public List<String> UserEmail { get; set; }

	[Parameter]
	public List<Film> Films { get; set; }



	[SupplyParameterFromForm]
	public Event? Event { get; set; }

	private string Title => IsEditMode ? $"Edit Event {EventId}" : "Create New Event";

	protected override async Task OnInitializedAsync()
	{

		var users = await RepositoryUser.GetAllUsersAsync();
		UserNames = users.Select(user => user.UserName).ToList();
		UserEmail = users.Select(user => user.Email).ToList();

		Films = await RepositoryFilm.GetAllFilmsAsync();

		if (IsEditMode)
		{
			Event ??= await Repository.GetEventByIdAsync(EventId);
		}
		else
		{
			Event ??= new();
		}
	}

	List<Film> FilmsToAdd = new List<Film>();
	public void OnFilmSelectionChanged(ChangeEventArgs e, Film film) 
	{
		

		if ((bool)e.Value)
		{
			if (!FilmsToAdd.Exists(f => f.Title == film.Title))
			{
				FilmsToAdd.Add(film);
			}
		}
		else
		{
			var FilmToRemove = FilmsToAdd.FirstOrDefault(f => f.Title == film.Title);
			if (FilmToRemove != null)
			{
				FilmsToAdd.Remove(FilmToRemove);
			}
		}
		/*{
			if (FilmsToAdd.Exists(f => f.Title == film.Title))
			{
				FilmsToAdd.Remove(film);
			}
		}*/
	}

	private async Task CreateOrEditEvent()
	{
	


		await OnValidEventSubmit.InvokeAsync(Event);
	}



}
