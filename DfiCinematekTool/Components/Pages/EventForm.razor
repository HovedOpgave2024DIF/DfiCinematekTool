@inject IEventRepository Repository
@inject IUserRepository RepositoryUser
@inject IFilmRepository RepositoryFilm

@if(Event is not null)
{
	<EditForm Enhance="true" method="post" FormName="CreateOrEditEventForm" OnValidSubmit="CreateOrEditEvent" Model="Event" autocomplete="off">
		<h3>
			@Title
		</h3>
		@if (IsEditMode)
		{
			<input type="hidden" name="Book.Id" value="@Event.Id" />
		}


		<div class="mb-3">
			<RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Event title</RadzenText>
			<RadzenTextBox @bind-Value=@Event.Title Style="width: 100%" aria-label="Default TextBox" />
		</div>

		<div class="mb-3">
		
				<RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Event abbriviation</RadzenText>
				<RadzenTextBox @bind-Value=@Event.Abbriviation Style="width: 100%" aria-label="Default TextBox" />
			
		</div>




		<div class="mb-3">
			
			
				<RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Event owner</RadzenText>
				<RadzenDropDown @bind-Value=@Event.Owner Data=@UserNames Style="width: 100%; max-width: 400px;" Name="EventTypeDropdown" />
			
		</div>


		<div class="mb-3">
			
			
				<RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Owner Email</RadzenText>
				<RadzenDropDown @bind-Value=@Event.OwnerEmail Data=@UserEmail Style="width: 100%; max-width: 400px;" Name="EventTypeDropdown" />
			
		</div>

		<div class="mb-3">
			<RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Duration in minutes</RadzenText>
			<RadzenNumeric @bind-Value=@Event.DurationInMinutes TValue="int" ShowUpDown="false" Placeholder="In minutes" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "enter value" }})" />
		</div>



		<div class="mb-3">
			<RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Date (DDMMYY)</RadzenText>
			<RadzenNumeric @bind-Value=@Event.DateId TValue="int" ShowUpDown="false" Placeholder="DDMMYY" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "enter value" }})" />

		</div>


		<div class="mb-3">
			
			
				<RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Event type</RadzenText>
				<RadzenDropDown @bind-Value=@Event.EventType Data=@EventTypeEnums Style="width: 100%; max-width: 400px;" Name="EventTypeDropdown" />
			
		</div>


		<div class="mb-3">
			
			
				<RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Screen</RadzenText>
				<RadzenDropDown @bind-Value=@Event.Screen Data=@ScreenEnums Style="width: 100%; max-width: 400px;" Name="ScreenDropdown" />
			

		</div>




		<div class="mb-3">
			<RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Is Event?</RadzenText>
			<RadzenCheckBox TValue="bool" @bind-Value=Event.IsEvent Change=@(args => Event.IsEvent = args) Name="IsEventCheck"></RadzenCheckBox>
		</div>


		<div class="mb-3">
			<RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Is Rooftop?</RadzenText>
			<RadzenCheckBox TValue="bool" @bind-Value=Event.IsRooftop Change=@(args => Event.IsRooftop = args) Name="IsRooftopCheck"></RadzenCheckBox>
		</div>



		<div class=" mb-3">
			<button class="btn-primary shadow-none">
				Submit
			</button>
			<a href="/" class="btn btn-secondary shadow-none ms-3">
				Back to list
			</a>
		</div>
		<DataAnnotationsValidator />
		<ValidationSummary />
	</EditForm>
}

@code {
	[Parameter]
	public bool IsEditMode { get; set; } = false;

	[Parameter]
	public int EventId { get; set; }


	[Parameter]
	public EventCallback<Event> OnValidEventSubmit { get; set; }

	[Parameter]
	public List<String> UserNames { get; set; }

	[Parameter]
	public List<String> UserEmail { get; set; }

	
	public List<string> ScreenEnums = Enum.GetValues(typeof(Screen)).Cast<Screen>().Select(s => s.ToString()).ToList();

	public List<string> EventTypeEnums = Enum.GetValues(typeof(EventType)).Cast<EventType>().Select(e => e.ToString()).ToList();




	[SupplyParameterFromForm]
	public Event? Event { get; set; }

	private string Title => IsEditMode ? $"Edit Event {EventId}" : "Create New Event";

	protected override async Task OnInitializedAsync()
	{

		var users = await RepositoryUser.GetAllUsersAsync();
		UserNames = users.Select(user => user.UserName).ToList();
		UserEmail = users.Select(user => user.Email).ToList();

		

		if (IsEditMode)
		{
			Event ??= await Repository.GetEventByIdAsync(EventId);
		}
		else
		{
			Event ??= new();
		}
	}

	private async Task CreateOrEditEvent()
	{
	


		await OnValidEventSubmit.InvokeAsync(Event);
	}



}
