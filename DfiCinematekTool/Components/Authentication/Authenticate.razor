@page "/Login/Authenticate"
@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager Navigation
@inject IUserService UserService
@inject LoginStateService LoginState

@code {
    protected override async Task OnInitializedAsync()
    {
        var username = LoginState.Username;
        var password = LoginState.Password;

        LoginState.Username = string.Empty;
        LoginState.Username = string.Empty;

        await PerformLogin(username, password);
    }

    private async Task PerformLogin(string Username, string Password)
    {

        if (string.IsNullOrWhiteSpace(Username) || string.IsNullOrWhiteSpace(Password))
        {
            Navigation.NavigateTo($"/Login", true);
            return;
        }

        var user = await UserService.GetUserByUserNameAsync(Username);
        if (user is null)
        {
            Navigation.NavigateTo($"/Login?Error=Ugyldige loginoplysninger.", true);
            return;
        }

        var result = await SignInManager.PasswordSignInAsync(user.UserName, Password, false, false);
        if (result.Succeeded)
        {
            Navigation.NavigateTo("/EventOverview", true);
        }
        else if (result.IsLockedOut)
        {
            Navigation.NavigateTo($"/Login?Error=Bruger låst.", true);
        }
        else
        {
            Navigation.NavigateTo($"/Login?Error=Ugyldig login forsøg.", true);
        }
    }
}
